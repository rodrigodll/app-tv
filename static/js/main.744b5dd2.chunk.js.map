{"version":3,"sources":["svg/netflix_logo.svg","svg/globoplay_logo.svg","svg/amazon_prime_video_logo.svg","svg/hbo_go_logo.svg","component/card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","state","name","class","className","type","onKeyDown","this","handleKeyUp","onChange","handleChangeName","src","logoNetflix","alt","logoAmazonprime","logoGloboplay","logoHbo","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,qD,gBCA3CD,EAAOC,QAAU,IAA0B,yC,wPCOtBC,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAGDC,MAAQ,CACHC,KAAM,GACNC,MAAO,UANC,E,qDAcZ,OAEI,yBAAKC,UAAU,QACX,2BACIC,KAAK,OACLC,UAAWC,KAAKC,YAChBC,SAAUF,KAAKG,mBAGnB,yBAAKN,UAAU,eACX,4BAAQA,UAAU,sBACd,yBAAKO,IAAKC,IAAaR,UAAU,aAAaS,IAAI,YAClD,qCAGJ,4BAAQT,UAAU,qBACd,yBAAKO,IAAKG,IAAiBV,UAAU,aAAaS,IAAI,iBACtD,qCAGJ,4BAAQT,UAAU,wBACd,yBAAKO,IAAKI,IAAeX,UAAU,aAAaS,IAAI,eACpD,qCAGJ,4BAAQT,UAAU,kBACd,yBAAKO,IAAKK,IAASZ,UAAU,aAAaS,IAAI,WAC9C,2C,GA1CUI,a,MCanBC,MAhBf,WACE,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,eAOlB,2CACA,kBAAC,EAAD,QCHce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.744b5dd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/netflix_logo.6dbba458.svg\";","module.exports = __webpack_public_path__ + \"static/media/globoplay_logo.c7bc32fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/amazon_prime_video_logo.4674256c.svg\";","module.exports = __webpack_public_path__ + \"static/media/hbo_go_logo.f8e0ad67.svg\";","import React, { Component } from 'react'\n\nimport logoNetflix from '../svg/netflix_logo.svg'\nimport logoGloboplay from '../svg/globoplay_logo.svg'\nimport logoAmazonprime from '../svg/amazon_prime_video_logo.svg'\nimport logoHbo from '../svg/hbo_go_logo.svg'\n\nexport default class Card extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t\n\t\t// Define valores iniciais\n\t\tthis.state = {\n            name: '',\n            class: 'active'\n        }\n    }\n    \n\n    render() {\n        // let player = this.props.boards.dungeons[this.props.boards.currentBoard].player;\n\n        return (\n            \n            <div className=\"card\">\n                <input\n                    type=\"text\"\n                    onKeyDown={this.handleKeyUp}\n                    onChange={this.handleChangeName}\n                />\n\n                <div className=\"card__group\">\n                    <button className=\"card__item netflix\">\n                        <img src={logoNetflix} className=\"card__logo\" alt=\"Netflix\" />\n                        <p>Abrir</p>\n                    </button>\n\n                    <button className=\"card__item amazon\">\n                        <img src={logoAmazonprime} className=\"card__logo\" alt=\"Amazon Prime\" />\n                        <p>Abrir</p>\n                    </button>\n\n                    <button className=\"card__item globoplay\">\n                        <img src={logoGloboplay} className=\"card__logo\" alt=\"Globo Play\" />\n                        <p>Abrir</p>\n                    </button>\n\n                    <button className=\"card__item hbo\">\n                        <img src={logoHbo} className=\"card__logo\" alt=\"Hbo Go\" />\n                        <p>Abrir</p>\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Card from './component/card';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n\n\n\n      \n      \n      <h2>Aplicativos</h2>\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}